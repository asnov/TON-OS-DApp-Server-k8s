---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: check-connect
  name: check-connect
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: check-connect
  template:
    metadata:
      labels:
        io.kompose.service: check-connect
    spec:
      containers:
      - env:
        - name: ADVERTISED_LISTENER
          value: kafka-ton
        image: senegal/tonlabs-kafka-check-connect:latest
        name: check-connect
        resources:
          limits:
            cpu: "1"
            memory: 1.5Gi
          requests:
            cpu: "0.2"
            memory: 0.5Gi
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: connect
  name: connect
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: connect
  template:
    metadata:
      labels:
        io.kompose.service: connect
    spec:
      containers:
      - env:
        - name: ADVERTISED_LISTENER
          value: kafka-ton
        - name: CLASSPATH
          value: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.2.1.jar
        - name: CONNECT_BOOTSTRAP_SERVERS
          value: kafka-ton:29092
        - name: CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
          value: "1"
        - name: CONNECT_CONFIG_STORAGE_TOPIC
          value: docker-connect-configs
        - name: CONNECT_CONSUMER_INTERCEPTOR_CLASSES
          value: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
        - name: CONNECT_FETCH_MESSAGE_MAX_BYTES
          value: "3001000"
        - name: CONNECT_GROUP_ID
          value: compose-connect-group
        - name: CONNECT_INTERNAL_KEY_CONVERTER
          value: org.apache.kafka.connect.json.JsonConverter
        - name: CONNECT_INTERNAL_VALUE_CONVERTER
          value: org.apache.kafka.connect.json.JsonConverter
        - name: CONNECT_KEY_CONVERTER
          value: org.apache.kafka.connect.storage.StringConverter
        - name: CONNECT_LOG4J_LOGGERS
          value: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
        - name: CONNECT_MAX_PARTITION_FETCH_BYTES
          value: "3001000"
        - name: CONNECT_MAX_REQUEST_SIZE
          value: "3001000"
        - name: CONNECT_OFFSET_FLUSH_INTERVAL_MS
          value: "10000"
        - name: CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
          value: "1"
        - name: CONNECT_OFFSET_STORAGE_TOPIC
          value: docker-connect-offsets
        - name: CONNECT_PLUGIN_PATH
          value: /usr/share/java,/usr/share/confluent-hub-components
        - name: CONNECT_PRODUCER_INTERCEPTOR_CLASSES
          value: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
        - name: CONNECT_REST_ADVERTISED_HOST_NAME
          value: connect
        - name: CONNECT_REST_PORT
          value: "8083"
        - name: CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
          value: "1"
        - name: CONNECT_STATUS_STORAGE_TOPIC
          value: docker-connect-status
        - name: CONNECT_VALUE_CONVERTER
          value: io.confluent.connect.avro.AvroConverter
        - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
          value: http://schema-registry:8081
        - name: CONNECT_ZOOKEEPER_CONNECT
          value: zookeeper:2181
        - name: KAFKA_JMX_PORT
          value: "9584"
        image: senegal/confluentinc-cp-kafka-connect:5.3.1
        name: connect
        resources:
          limits:
            cpu: "1"
            memory: 1.5Gi
          requests:
            cpu: "0.2"
            memory: 0.5Gi
#        volumeMounts:
#        - mountPath: /usr/share/java/kafka-connect-arangodb
#          name: connect-claim0
#      volumes:
#      - name: connect-claim0
#        persistentVolumeClaim:
#          claimName: connect-claim0

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: kafka
  name: kafka-ton
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka
  template:
    metadata:
      labels:
        io.kompose.service: kafka
    spec:
      containers:
      - env:
        - name: ADVERTISED_LISTENER
          value: kafka-ton
        - name: KAFKA_ADVERTISED_LISTENERS
          value: PLAINTEXT://kafka-ton:29092,PLAINTEXT_HOST://kafka-ton:9092
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_CLEANUP_POLICY
          value: delete
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: PLAINTEXT
        - name: KAFKA_JMX_PORT
          value: "9581"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        - name: KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS
          value: "300000"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "4"
        - name: KAFKA_LOG_ROLL_MS
          value: "600000"
        - name: KAFKA_LOG_SEGMENT_BYTES
          value: "1073741824"
        - name: KAFKA_MESSAGE_MAX_BYTES
          value: "3001000"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_RECEIVE_MESSAGE_MAX_BYTES
          value: "3001000"
        - name: KAFKA_REPLICA_FETCH_MAX_BYTES
          value: "3001000"
        - name: KAFKA_RETENTION_MS
          value: "43200000"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper:2181
        image: confluentinc/cp-kafka:5.3.1
        name: kafka-ton
        resources:
          limits:
            cpu: "1"
            memory: 1.5Gi
          requests:
            cpu: "0.2"
            memory: 0.5Gi
        ports:
        - containerPort: 9092
#        volumeMounts:
#        - mountPath: /var/lib/kafka/data
#          name: data
#      volumes:
#      - name: data
#        persistentVolumeClaim:
#          claimName: data

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: schema-registry
  name: schema-registry-ton
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: schema-registry
  template:
    metadata:
      labels:
        io.kompose.service: schema-registry
    spec:
      containers:
      - env:
        - name: ADVERTISED_LISTENER
          value: kafka-ton
        - name: SCHEMA_REGISTRY_HOST_NAME
          value: schema-registry
        - name: SCHEMA_REGISTRY_JMX_PORT
          value: "9582"
        - name: SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL
          value: zookeeper:2181
        image: confluentinc/cp-schema-registry:5.3.1
        name: schema-registry-ton
        ports:
        - containerPort: 8081
        resources:
          limits:
            cpu: "1"
            memory: 1.5Gi
          requests:
            cpu: "0.2"
            memory: 0.5Gi
#        volumeMounts:
#        - mountPath: /etc/confluent/docker/launch
#          name: schema-registry-claim0
#      volumes:
#      - name: schema-registry-claim0
#        persistentVolumeClaim:
#          claimName: schema-registry-claim0

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: zookeeper
  template:
    metadata:
      labels:
        io.kompose.service: zookeeper
    spec:
      containers:
      - env:
        - name: ADVERTISED_LISTENER
          value: kafka-ton
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        image: confluentinc/cp-zookeeper:5.3.1
        name: zookeeper
        resources:
          limits:
            cpu: "1"
            memory: 1.5Gi
          requests:
            cpu: "0.2"
            memory: 0.5Gi
        ports:
        - containerPort: 2181
